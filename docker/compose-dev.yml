version: "3.8"
name: barakah-fund-dev

services:
    postgres:
        image: postgres:15-alpine
        container_name: barakah-postgres
        ports:
            - "5432:5432"
        environment:
            - POSTGRES_DB=barakah_main
            - POSTGRES_USER=barakah_admin
            - POSTGRES_PASSWORD=barakah_admin_pass
            - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./init-scripts:/docker-entrypoint-initdb.d:ro
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U barakah_admin -d barakah_main"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s
        networks:
            - barakah-network
        restart: unless-stopped

    keycloak:
        image: quay.io/keycloak/keycloak:24.0.5
        container_name: barakah-keycloak
        ports:
            - "8080:8080"
        environment:
            - KEYCLOAK_ADMIN=admin
            - KEYCLOAK_ADMIN_PASSWORD=admin
            - KC_DB=postgres
            - KC_DB_URL=jdbc:postgresql://postgres:5432/barakah_main
            - KC_DB_USERNAME=barakah_admin
            - KC_DB_PASSWORD=barakah_admin_pass
            - KC_HOSTNAME=localhost
            - KC_HTTP_ENABLED=true
            - KC_METRICS_ENABLED=true
            - KC_HEALTH_ENABLED=true
        command: start-dev --import-realm
        volumes:
            - ./barakah-realm.json:/opt/keycloak/data/import/barakah-realm.json
        depends_on:
            postgres:
                condition: service_healthy
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "curl -f http://localhost:8080/health/ready || exit 1",
                ]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 60s
        networks:
            - barakah-network
        restart: unless-stopped

    config-server:
        build:
            context: ../config-server
            dockerfile: Dockerfile
        container_name: barakah-config-server
        ports:
            - "8888:8888"
        environment:
            - CONFIG_SERVER_USERNAME=config-user
            - CONFIG_SERVER_PASSWORD=config-pass
            - SPRING_PROFILES_ACTIVE=native,security
            - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=classpath:/config/,file:/app/config/
            - SPRING_CLOUD_CONFIG_SERVER_GIT_URI=""
            - SPRING_CLOUD_CONFIG_SERVER_BOOTSTRAP=false
            - SPRING_CLOUD_CONFIG_SERVER_ACCEPT_EMPTY=true
            - JAVA_OPTS=-Xmx512m -Xms256m
        volumes:
            - ../config:/app/config:ro
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 60s
        networks:
            - barakah-network
        restart: unless-stopped

    eureka-server:
        build:
            context: ../eureka-server
            dockerfile: Dockerfile
        container_name: barakah-eureka-server
        ports:
            - "8761:8761"
        environment:
            - CONFIG_SERVER_URI=http://config-server:8888
            - CONFIG_SERVER_USERNAME=config-user
            - CONFIG_SERVER_PASSWORD=config-pass
            - SPRING_PROFILES_ACTIVE=docker
        depends_on:
            config-server:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 60s
        networks:
            - barakah-network
        restart: unless-stopped

    user-service:
        build:
            context: ../user-service
            dockerfile: Dockerfile
        container_name: barakah-user-service
        ports:
            - "8081:8081"
            - "9091:9091"
        environment:
            - CONFIG_SERVER_URI=http://config-server:8888
            - CONFIG_SERVER_USERNAME=config-user
            - CONFIG_SERVER_PASSWORD=config-pass
            - SPRING_PROFILES_ACTIVE=docker
            - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
            - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/barakah_users
            - KEYCLOAK_AUTH_SERVER_URL=http://keycloak:8080
            - JAVA_OPTS=-Xmx1024m -Xms512m
        volumes:
            - user_service_logs:/app/logs
        depends_on:
            postgres:
                condition: service_healthy
            keycloak:
                condition: service_healthy
            config-server:
                condition: service_healthy
            eureka-server:
                condition: service_healthy
        healthcheck:
            test:
                [
                    "CMD",
                    "curl",
                    "-f",
                    "http://localhost:8081/user-service/actuator/health",
                ]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 120s
        networks:
            - barakah-network
        restart: unless-stopped

    kafka:
        image: bitnami/kafka:latest
        container_name: kafka
        ports:
            - "9192:9192"
            - "9193:9193"
        environment:
            KAFKA_ENABLE_KRAFT: yes
            KAFKA_CFG_PROCESS_ROLES: broker,controller
            KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_CFG_LISTENERS: PLAINTEXT://:9192,CONTROLLER://:9193
            KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
            KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9192
            
            KAFKA_CFG_BROKER_ID: 1
            KAFKA_CFG_NODE_ID: 1
            KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@localhost:9193
            
            ALLOW_PLAINTEXT_LISTENER: yes
            KAFKA_KRAFT_CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
            
            KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
            KAFKA_CFG_NUM_PARTITIONS: 1
            KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
        networks:
            - barakah-network
        healthcheck:
            test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9192 --list || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 60s
        restart: unless-stopped

    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        container_name: barakah-kafka-ui
        ports:
            - "8181:8080"
        environment:
            KAFKA_CLUSTERS_0_NAME: barakah-cluster
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: localhost:9192
            KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
        depends_on:
            kafka:
                condition: service_healthy
        network_mode: host
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "curl -f http://localhost:8080/actuator/health || exit 1",
                ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s
        restart: unless-stopped

    redis:
        image: redis:7-alpine
        container_name: barakah-redis
        ports:
            - "6379:6379"
        command: redis-server --appendonly yes
        volumes:
            - redis_data:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s
        networks:
            - barakah-network
        restart: unless-stopped

networks:
    barakah-network:
        driver: bridge
        name: barakah-network

volumes:
    redis_data:
        driver: local
    postgres_data:
        driver: local
    config_data:
        driver: local
    user_service_logs:
        driver: local

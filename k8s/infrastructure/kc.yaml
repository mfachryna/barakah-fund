apiVersion: v1
kind: Service
metadata:
    name: keycloak
    namespace: barakah-fund
    labels:
        app: keycloak
spec:
    ports:
        - protocol: TCP
          port: 8080
          targetPort: http
          name: http
    selector:
        app: keycloak
    type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
    labels:
        app: keycloak
    name: keycloak-discovery
spec:
    selector:
        app: keycloak
    publishNotReadyAddresses: true
    clusterIP: None
    type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: keycloak
    labels:
        app: keycloak
spec:
    serviceName: keycloak-discovery
    replicas: 2
    selector:
        matchLabels:
            app: keycloak
    template:
        metadata:
            labels:
                app: keycloak
        spec:
            containers:
                - name: keycloak
                  image: quay.io/keycloak/keycloak:26.2.5
                  args: ["start"]
                  env:
                      - name: KC_BOOTSTRAP_ADMIN_USERNAME
                        value: "admin"
                      - name: KC_BOOTSTRAP_ADMIN_PASSWORD
                        value: "admin"
                      - name: KC_PROXY_HEADERS
                        value: "xforwarded"
                      - name: KC_HTTP_ENABLED
                        value: "true"
                      - name: KC_HOSTNAME_STRICT
                        value: "false"
                      - name: KC_HEALTH_ENABLED
                        value: "true"
                      - name: "KC_CACHE"
                        value: "ispn"
                      - name: "KC_CACHE_STACK"
                        value: "kubernetes"
                      - name: POD_IP
                        valueFrom:
                            fieldRef:
                                fieldPath: status.podIP
                      - name: JAVA_OPTS_APPEND
                        value: '-Djgroups.dns.query="keycloak-discovery" -Djgroups.bind.address=$(POD_IP)'
                      - name: "KC_DB_URL_DATABASE"
                        value: "keycloak"
                      - name: "KC_DB_URL_HOST"
                        value: "postgres"
                      - name: "KC_DB"
                        value: "postgres"
                      # In a production environment, use a secret to store username and password to the database
                      - name: "KC_DB_PASSWORD"
                        value: "keycloak"
                      - name: "KC_DB_USERNAME"
                        value: "keycloak"
                  ports:
                      - name: http
                        containerPort: 8080
                  startupProbe:
                      httpGet:
                          path: /health/started
                          port: 9000
                  readinessProbe:
                      httpGet:
                          path: /health/ready
                          port: 9000
                  livenessProbe:
                      httpGet:
                          path: /health/live
                          port: 9000
                  resources:
                      limits:
                          cpu: 2000m
                          memory: 2000Mi
                      requests:
                          cpu: 500m
                          memory: 1700Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: postgres
    labels:
        app: postgres
spec:
    replicas: 1
    selector:
        matchLabels:
            app: postgres
    template:
        metadata:
            labels:
                app: postgres
        spec:
            containers:
                - name: postgres
                  image: mirror.gcr.io/postgres:17
                  env:
                      - name: POSTGRES_USER
                        value: "keycloak"
                      - name: POSTGRES_PASSWORD
                        value: "keycloak"
                      - name: POSTGRES_DB
                        value: "keycloak"
                      - name: POSTGRES_LOG_STATEMENT
                        value: "all"
                  ports:
                      - name: postgres
                        containerPort: 5432
                  volumeMounts:
                      # Using volume mount for PostgreSQL's data folder as it is otherwise not writable
                      - name: postgres-data
                        mountPath: /var/lib/postgresql
            volumes:
                - name: postgres-data
                  emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
    labels:
        app: postgres
    name: postgres
spec:
    selector:
        app: postgres
    ports:
        - protocol: TCP
          port: 5432
          targetPort: 5432
    type: ClusterIP

# spring:
#     application:
#         name: account-service
    
#     config:
#         fail-fast: false
#         activate:
#             on-profile: docker

#     cloud:
#         config:
#             enabled: false
#         vault:
#             enabled: ${VAULT_ENABLED:false}
#             host: ${SPRING_CLOUD_VAULT_HOST:localhost}
#             port: ${SPRING_CLOUD_VAULT_PORT:8200}
#             scheme: ${SPRING_CLOUD_VAULT_SCHEME:http}
#             authentication: TOKEN
#             token: ${SPRING_CLOUD_VAULT_TOKEN:root-token}

#     datasource:
#         url: jdbc:postgresql://${DB_HOST:postgres}:${DB_PORT:5432}/${DB_NAME:barakah_accounts}
#         username: ${DB_USERNAME:barakah_account}
#         password: ${DB_PASSWORD:barakah_account_password}
#         driver-class-name: org.postgresql.Driver
#         hikari:
#             maximum-pool-size: 10
#             minimum-idle: 5
#             connection-timeout: 20000
#             idle-timeout: 300000
#             max-lifetime: 1200000

#     kafka:
#         bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9192}
#         consumer:
#             group-id: account-service
#             auto-offset-reset: earliest
#             enable-auto-commit: false
#             key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#             value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#             properties:
#                 spring.json.trusted.packages: "com.barakah.shared.event"

#     jpa:
#         hibernate:
#             ddl-auto: validate
#             naming:
#                 physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#         properties:
#             hibernate:
#                 dialect: org.hibernate.dialect.PostgreSQLDialect
#                 show_sql: true
#                 format_sql: true
#                 use_sql_comments: true
#                 jdbc:
#                     batch_size: 20
#                 order_inserts: true
#                 order_updates: true
#         show-sql: true
#         open-in-view: false

#     flyway:
#         enabled: true
#         baseline-on-migrate: true
#         baseline-version: 0
#         out-of-order: true
#         validate-on-migrate: false
#         locations: classpath:db/migration

#     cache:
#         type: redis
#     redis:
#         host: ${REDIS_HOST:redis}
#         port: ${REDIS_PORT:6379}
#         timeout: 2000
#         database: ${REDIS_DATABASE:0}
#         password: ${REDIS_PASSWORD:}
#         lettuce:
#             pool:
#                 max-active: 8
#                 max-wait: -1ms
#                 max-idle: 8
#                 min-idle: 0
#             shutdown-timeout: 100ms

# server:
#     port: 8082
#     servlet:
#         context-path: /account-service
#     error:
#         include-message: always
#         include-binding-errors: always
#         include-stacktrace: on_param

# grpc:
#     server:
#         port: 9092
#         enable-reflection: true
#         max-inbound-message-size: 4MB
#         max-outbound-message-size: 4MB

#     client:
#         user-service:
#             address: discovery:///user-service
#             negotiationType: plaintext
#             keepAliveTime: 30s
#             keepAliveTimeout: 5s
#             keepAliveWithoutCalls: true
#             maxRetryAttempts: 3
#         transaction-service:
#             address: discovery:///transaction-service
#             negotiationType: plaintext
#             keepAliveTime: 30s
#             keepAliveTimeout: 5s
#             keepAliveWithoutCalls: true
#             maxRetryAttempts: 3

# eureka:
#     client:
#         service-url:
#             defaultZone: http://${EUREKA_HOST:eureka-server}:${EUREKA_PORT:8761}/eureka/
#         eureka-server-connect-timeout-seconds: 5
#         eureka-server-read-timeout-seconds: 8
#         registry-fetch-interval-seconds: 30
#         register-with-eureka: true
#         fetch-registry: true
#         healthcheck:
#             enabled: true
#     instance:
#         prefer-ip-address: true
#         hostname: ${HOSTNAME:localhost}
#         instance-id: ${spring.application.name}:${random.value}
#         lease-renewal-interval-in-seconds: 30
#         lease-expiration-duration-in-seconds: 90
#         metadata-map:
#             grpc.port: 9092
#             grpc.enabled: true
#             management.context-path: /account-service/actuator

# keycloak:
#     auth-server-url: ${KEYCLOAK_URL:http://keycloak:8080}
#     realm: ${KEYCLOAK_REALM:barakah}
#     resource: ${KEYCLOAK_CLIENT_ID:user-service}
#     credentials:
#         secret: ${KEYCLOAK_CLIENT_SECRET:user-service-secret-change-me}
#     admin:
#         username: ${KEYCLOAK_ADMIN_USERNAME:admin}
#         password: ${KEYCLOAK_ADMIN_PASSWORD:admin}
#         client-id: ${KEYCLOAK_ADMIN_CLIENT_ID:admin-cli}
#     mock:
#         enabled: ${KEYCLOAK_MOCK_ENABLED:true}

# management:
#     endpoints:
#         web:
#             exposure:
#                 include: health,info,metrics,prometheus,flyway
#             base-path: /actuator
#     endpoint:
#         health:
#             show-details: always
#             show-components: always
#         metrics:
#             enabled: true
#     health:
#         eureka:
#             enabled: true
#         db:
#             enabled: true
#     metrics:
#         export:
#             prometheus:
#                 enabled: true

# logging:
#     level:
#         com.barakah: DEBUG
#         org.springframework.cloud.gateway: DEBUG
#         io.grpc: INFO
#         net.devh: DEBUG

# app:
#     security:
#         cors:
#             allowed-origins: "http://localhost:3000,http://localhost:4200,http://localhost:8080"
#             allowed-methods: "GET,POST,PUT,DELETE,OPTIONS"
#             allowed-headers: "*"
#             allow-credentials: true
#             max-age: 3600
#         jwt:
#             secret: ${JWT_SECRET:dev-account-secret-key-change-in-production}
#             expiration: ${JWT_EXPIRATION:86400000}

#     services:
#         user-service:
#             url: http://user-service:8081
#             timeout: 5000
#         transaction-service:
#             url: http://transaction-service:8083
#             timeout: 5000
#         notification-service:
#             url: http://notification-service:8084
#             timeout: 3000

# resilience4j:
#     circuitbreaker:
#         instances:
#             account-service:
#                 registerHealthIndicator: true
#                 slidingWindowSize: 10
#                 minimumNumberOfCalls: 5
#                 failureRateThreshold: 50
#                 waitDurationInOpenState: 30s
#                 permittedNumberOfCallsInHalfOpenState: 3
#                 recordExceptions:
#                     - io.grpc.StatusRuntimeException
#                     - java.util.concurrent.TimeoutException
#     retry:
#         instances:
#             account-service:
#                 maxAttempts: 3
#                 waitDuration: 2s
#                 exponentialBackoffMultiplier: 2
#                 retryExceptions:
#                     - io.grpc.StatusRuntimeException
#                     - java.util.concurrent.TimeoutException

# features:
#     account-validation: true
#     balance-tracking: true
#     audit-logging: true
#     rate-limiting: true
#     cache-enabled: true

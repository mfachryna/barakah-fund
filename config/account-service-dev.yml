spring:
    datasource:
        url: jdbc:postgresql://localhost:5432/barakah_accounts
        username: barakah_account
        password: barakah_account_password
        driver-class-name: org.postgresql.Driver
        hikari:
            maximum-pool-size: 10
            minimum-idle: 5
            connection-timeout: 20000
            idle-timeout: 300000
            max-lifetime: 1200000

    kafka:
        bootstrap-servers: localhost:9192
        consumer:
            group-id: account-service
            auto-offset-reset: earliest
            enable-auto-commit: false
            key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
            properties:
                spring.json.trusted.packages: "com.barakah.shared.event"

    cache:
        type: redis
        redis:
            time-to-live: 300000
            cache-null-values: false
            key-prefix: "acc:"

    redis:
        host: localhost
        port: 6379
        timeout: 2000ms
        database: 1
    jpa:
        hibernate:
            ddl-auto: validate
            naming:
                physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
                show_sql: true
                format_sql: true
                use_sql_comments: true
                jdbc:
                    batch_size: 20
                order_inserts: true
                order_updates: true
        show-sql: true
        open-in-view: false

    flyway:
        enabled: true
        baseline-on-migrate: true
        locations: classpath:db/migration

server:
    port: 8082
    servlet:
        context-path: /account-service
    error:
        include-message: always
        include-binding-errors: always
        include-stacktrace: on_param

grpc:
    server:
        port: 9092
        enable-reflection: true
        max-inbound-message-size: 4MB
        max-outbound-message-size: 4MB

eureka:
    client:
        service-url:
            defaultZone: http://localhost:8761/eureka/
        register-with-eureka: true
        fetch-registry: true
        healthcheck:
            enabled: true
    instance:
        prefer-ip-address: true
        hostname: localhost
        lease-renewal-interval-in-seconds: 5
        lease-expiration-duration-in-seconds: 10
        metadata-map:
            grpc.port: 9092
            management.context-path: /account-service/actuator

keycloak:
    auth-server-url: http://localhost:8080
    realm: barakah
    resource: user-service
    credentials:
        secret: user-service-secret-change-me

    admin:
        username: admin
        password: admin
        client-id: admin-cli

    mock:
        enabled: true

management:
    endpoints:
        web:
            exposure:
                include: health,info,metrics,prometheus,flyway
            base-path: /actuator
    endpoint:
        health:
            show-details: always
            show-components: always
        metrics:
            enabled: true
    health:
        eureka:
            enabled: true
        db:
            enabled: true
    metrics:
        export:
            prometheus:
                enabled: true

logging:
    level:
        com.barakah: DEBUG
        com.barakah.account: TRACE
        com.barakah.shared: DEBUG
        org.springframework.security: DEBUG
        org.springframework.web: DEBUG
        org.springframework.transaction: DEBUG
        org.hibernate.SQL: DEBUG
        org.hibernate.type.descriptor.sql.BasicBinder: TRACE
        net.devh.boot.grpc: DEBUG
        io.grpc: INFO
        org.flywaydb: INFO
    pattern:
        console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
        file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file:
        name: logs/account-service-dev.log
        max-size: 10MB
        max-history: 30

app:
    security:
        cors:
            allowed-origins: "http://localhost:3000,http://localhost:4200,http://localhost:8080"
            allowed-methods: "GET,POST,PUT,DELETE,OPTIONS"
            allowed-headers: "*"
            allow-credentials: true
            max-age: 3600
        jwt:
            secret: dev-account-secret-key-change-in-production
            expiration: 86400000

    # account:
    #     default-status: ACTIVE
    #     balance:
    #         min-balance: 0.00
    #         max-daily-transaction: 10000.00
    #     account-number:
    #         prefix: "ACC"
    #         length: 12

    services:
        user-service:
            url: http://localhost:8081
            timeout: 5000
        notification-service:
            url: http://localhost:8084
            timeout: 3000

resilience4j:
    circuitbreaker:
        instances:
            account-service:
                failure-rate-threshold: 50
                minimum-number-of-calls: 10
                wait-duration-in-open-state: 60s
                sliding-window-size: 20
                record-failure-predicate: com.barakah.shared.config.ServiceFailurePredicate
            database:
                failure-rate-threshold: 60
                minimum-number-of-calls: 5
                wait-duration-in-open-state: 30s

    retry:
        configs:
            default:
                max-attempts: 3
                wait-duration: 500ms
                exponential-backoff-multiplier: 2
                retry-exception-predicate: com.barakah.shared.config.ServiceRetryPredicate
                retry-exceptions:
                    - java.net.ConnectException
                    - java.net.SocketTimeoutException
                    - java.net.SocketException
                    - java.util.concurrent.TimeoutException
                    - java.sql.SQLTransientConnectionException
                    - org.springframework.dao.QueryTimeoutException
                    - org.springframework.dao.TransientDataAccessException
                    - org.springframework.dao.CannotAcquireLockException
                    - org.springframework.transaction.CannotCreateTransactionException
                    - org.springframework.web.client.ResourceAccessException
                
                ignore-exceptions:
                    - java.lang.IllegalArgumentException
                    - java.lang.IllegalStateException 
                    - java.lang.SecurityException
                    - jakarta.validation.ValidationException
                    - org.springframework.web.bind.MethodArgumentNotValidException
                    - org.springframework.security.access.AccessDeniedException
                    - org.springframework.dao.DataIntegrityViolationException
                    - com.barakah.account.exception.AccountExceptions$AccountAlreadyExistsException
                    - com.barakah.account.exception.AccountExceptions$AccountNotFoundException
                    - com.barakah.account.exception.AccountExceptions$InsufficientBalanceException
                    - com.barakah.shared.exception.BusinessException
        instances:
            database:
                base-config: default
                max-attempts: 3
                wait-duration: 200ms
                retry-exception-predicate: com.barakah.shared.config.ServiceRetryPredicate

rate-limit:
    per-endpoint:
        create-account: 5
        get-account: 100
        get-balance: 200
        update-balance: 50
        list-accounts: 30
        validate-account: 150

features:
    account-validation: true
    balance-tracking: true
    audit-logging: true
    rate-limiting: true
    cache-enabled: true
